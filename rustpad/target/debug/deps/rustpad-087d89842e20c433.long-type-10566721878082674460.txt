warp::filter::or::Or<impl warp::filter::FilterClone + warp::filter::FilterBase<Extract = (warp::fs::File,), Error = Rejection>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::Filter + warp::filter::FilterBase<Extract = (Ws,), Error = Rejection> + std::marker::Copy>, impl warp::Filter + warp::filter::FilterBase<Extract = (Arc<std::sync::Mutex<HashMap<std::string::String, UnboundedSender<warp::ws::Message>>>>,), Error = Infallible> + Clone>, impl warp::Filter + warp::filter::FilterBase<Extract = (tokio::sync::broadcast::Sender<DocumentUpdate>,), Error = Infallible> + Clone>, impl warp::Filter + warp::filter::FilterBase<Extract = (Arc<std::sync::Mutex<HashMap<std::string::String, std::string::String>>>,), Error = Infallible> + Clone>, fn(WebSocket, Arc<std::sync::Mutex<HashMap<std::string::String, UnboundedSender<warp::ws::Message>>>>, tokio::sync::broadcast::Sender<DocumentUpdate>, Arc<std::sync::Mutex<HashMap<std::string::String, std::string::String>>>) -> impl warp::Future<Output = Result<impl Reply, Rejection>> {handle_websocket}>>
